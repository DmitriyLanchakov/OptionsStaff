{
    "contents" : "\n# *********************************************\n#  Volatility smile calculation\n# ********************************************\n\n\n\n#' Returns implied volatility value depending the model\n#' \n#' @param strike function returns IV for this strike\n#' @param fut current base asset price\n#' @param tdays days til option expiration\n#' @param coef.vector input model coefficients vector\n#' @param method smie model type: \"poly\" = 1 - polynomial, \"rts\" = 2 - RTS smile model\n#' @export\n\nsmileValue = function(strike, fut, tdays, coef.vector=NULL, method=2)\n{\n  vx.methods = c(poly = 1, rts = 2)\n  \n    s = try(as.numeric(coef.vector[['s']]), silent = T)\n    a = try(as.numeric(coef.vector[['a']]), silent = T)\n    b = try(as.numeric(coef.vector[['b']]), silent = T)\n    c = try(as.numeric(coef.vector[['c']]), silent = T)\n    d = try(as.numeric(coef.vector[['d']]), silent = T)\n    e = try(as.numeric(coef.vector[['e']]), silent = T)\n    f = try(as.numeric(coef.vector[['f']]), silent = T)\n    g = try(as.numeric(coef.vector[['g']]), silent = T)\n   \n  try({ \n    if(method==1) \n      vxs=a + b*(1 - e ^ ( (-1)*c*( 1/(tdays/365)^0.5 * log(strike / fut)-s )^2 )) +  d * atan(e * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s)) / e\n  \n    if(method==2)  \n      vxs =  a + b*(1 - exp(-c * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s) ^ 2)) + d * atan(e * (1 / (tdays / 365) ^ 0.5 * log(strike / fut) - s)) / e\n    \n    if(method==2)\n      vxs = a + b*strike + c*strike^2 + d*strike^3 + e*strike^4 + f*strike^5 + g*strike^6\n   \n  }, silent=T)\n  \n  return(as.numeric(vxs))\n}\n\n\n\n#' Volatility smile model coeficients search\n#' \n#' @param ivs known volatility values \n#' @param strikes related to ivs strikes\n#' @param spot current base asset price\n#' @param days days til option expiration\n#' @param start beginning coefficients vector\n#' @param method smie model type: \"poly\" = 1 - polynomial, \"rts\" = 2 - RTS smile model\n#' @export\n\nsmileCoefs <- function(ivs, strikes, spot, days, start = NULL, method = 2)\n{\n\n  require(nlmrt)\n  require(stats)\n  library(minpack.lm)\n  \n  if(method==1){\n    \n    jbdata = data.frame( strike = strikes, vx.fact = ivs )\n    jbmodel <- paste(\"vx.fact ~ a+b*(1-e^(-c*(1/(\", days , \"/365)^0.5*log(strike/\", spot ,\",exp(1))-s)^2))+d*atan(e*(1/(\", days ,\"/365)^0.5*log(strike/\", spot ,\",exp(1))-s))/e \")\n    \n    if ( is.null(start) ) start = c(s=-0.18, a=0.31, b=1.25, c=0.28, d=-0.38, e=1.43)\n    \n    model.coef <- nlxb(jbmodel, start=start, trace=T, data=jbdata)\n    return(model.coef)\n  }\n  \n  if(method==2){\n    \n    xx = 1/(days/365)^0.5*log(strikes/spot)\n    dframe = data.frame(ivs = ivs, xx = xx)\n    set.seed(10000)\n    n = 1\n    \n    # start=list(s=-0.18, a=0.2, b=0.2, c=1, d=-0.08, e=5)\n    nmax = 1000\n    \n    s=runif(nmax, -1.5, 1.5)\n    a=runif(nmax, 0, 1.5)* rep(min(dframe$ivs, na.rm = T), nmax) #runif(nmax, -1.5, 1.5)\n    b=runif(nmax, -1.5, 1.5)\n    c=runif(nmax, -1.5, 1.5)\n    d=runif(nmax, -1.5, 1.5)\n    e=runif(nmax, -1.5, 1.5)\n    iv.mod=0\n    \n    while(n <= nmax){\n      \n      start  = list(s = -s[n], a = a[n], b = b[n], c = c[n], d = -d[n], e = e[n])\n      iv.mod = try(nlsLM(formula = paste('ivs ~ a + b*(1-exp(-c*(xx-s)^2)) + d*atan((xx-s)*e)/e'), data=dframe, start=start ), TRUE)\n      if(class(iv.mod) == 'try-error') iv.mod = NULL else return(coef(iv.mod))\n      \n      n=n+1\n    }\n    \n    return(coef(iv.mod))\n  }\n  \n  if(method==3){\n    \n    dframe = data.frame(iv = ivs, strike = strikes)\n    starts = list(a=runif(1, min = -1, max = 1), \n                  b=runif(1, min = -1, max = 1), \n                  c=runif(1, min = -1, max = 1), \n                  d=runif(1, min = -1, max = 1), \n                  e=runif(1, min = -1, max = 1), \n                  f=runif(1, min = -1, max = 1), \n                  g=runif(1, min = -1, max = 1))\n    \n    mcf2 = nlsLM('iv ~ a + b*strike + c*strike^2 + d*strike^3 + e*strike^4 + f*strike^5 + g*strike^6', data = dframe, start = starts)\n    \n    return(coef(mcf2))\n  }\n  \n  return(0)\n}\n\n\n\n\n\n\n\n",
    "created" : 1446660478231.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "2420690267",
    "id" : "EEE3D75D",
    "lastKnownWriteTime" : 1438148237,
    "path" : "~/MyR/OptionsPortfilioAnalyser/R/deriv_vxsmile.R",
    "project_path" : "R/deriv_vxsmile.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}