{
    "contents" : "\n# ******************************************************************\n#\n# Functions to get futures and options current data from www.moex.com \n#\n# *****************************************************************\n\n# Sys.setenv(http_proxy=\"http://10.1.144.50:3128\")\n\n# +-----------------------------------------------------+\n# | Returns vector of avalible base futures for options\n# +-----------------------------------------------------+\nfuturesList = function(){\n  \n  library(rvest)\n  library(dplyr)\n  \n  url = 'http://moex.com/ru/derivatives/optionsdesk.aspx'\n  urlpage = read_html(url)\n  futures = html_nodes(urlpage, 'option') %>% html_text()\n  return(unique(futures))\n  \n}\n\n\n\n# +---------------------------+\n# | Download board web page\n# +---------------------------+\nboardDownload = function(fut){\n  \n  library(rvest)\n  url = paste0('http://moex.com/ru/derivatives/optionsdesk.aspx?sby=116&sub=on&code=', fut, '&c1=on&c2=on&c6=on&c3=on&c5=on&c4=on&c7=on&sid=1')\n  hh = read_html(url)\n  return(hh)\n  \n}\n  \n\n# +--------------------------------------------+\n# | Returns data time as POSIXct\n# +--------------------------------------------+\n\ndatetimeCurrentInfo = function(x){\n  \n  library(dplyr)\n  library(rvest)\n  \n  #x = boardDownload('RTS-12.15')\n  hh = x\n  curtime = html_nodes(hh, xpath = '//table/tr[1]/td[2]/table/tr[2]/td/table/tr/td/table/tr[2]/td[2]/div[2]/span') %>% \n    html_text() %>%\n    substr(., nchar(.)-15, nchar(.)) %>% \n    as.POSIXct(., format='%d.%m.%Y %H:%M')\n  return(curtime)\n}\n\n# boardDownload(\"RTS-12.15\") %>% datetimeCurrentInfo()\n  \n# +--------------------------------------------+\n# | Returns list of selected future parametres\n# +--------------------------------------------+\n\nfutureCurrentInfo = function(x){\n  \n  library(dplyr)\n  library(rvest)\n  \n  hh = x\n  \n  futData = html_nodes(hh, xpath = '//table/tr[1]/td[2]/table/tr[2]/td/table/tr/td/table/tr[2]/td[2]/table[2]') %>% \n    html_table(fill=T) %>%\n    data.frame(.) %>% \n    select(c(1:12)) %>% \n    slice(4) %>% \n    gsub(rawToChar(as.raw(194)), '', ., useBytes=T) %>% \n    gsub(rawToChar(as.raw(160)), '', ., useBytes=T) %>% \n    gsub(',', '.', .) %>% as.list(.) \n  \n  if(futData[[2]]=='') \n    futData[4:12] = futData[3:11]\n  \n  \n  futData=lapply(futData, function(x){\n      suppressWarnings(ifelse(is.na(as.numeric(x)), x, as.numeric(x)))\n    })\n  \n  names(futData) = c('code', 'last', 'lastdate', 'roc', 'bid', 'ask', 'maxpr', 'minpr', 'volrub', 'volfuts', 'trades', 'OI')\n  \n  return(futData)\n}\n\n# Example\n# futureCurrentInfo(\"MXI-12.15\")\n# boardDownload(\"RTS-12.15\") %>% futureCurrentInfo()\n\n\n\n# +----------------------------------------------+\n# | Returns list of option boards for the future\n# +----------------------------------------------+\n\noptionsCurrentInfo = function(x){\n  \n  library(dplyr)\n  library(rvest)\n \n  hh = x\n  \n  optboardList = list()\n  optExps = vector()\n  \n  for(n in 0:2){\n    \n    try({\n        \n        # Read expiration date\n        optseriesExp = html_nodes(hh, xpath = paste0('//table/tr[1]/td[2]/table/tr[2]/td/table/tr/td/table/tr[2]/td[2]/table[3]/tr/td/table[', 1+n*3 ,']') ) %>% \n          html_table(fill=T) %>%\n          data.frame(.) %>% .[3,2] %>%  strsplit(.,' ') %>% .[[1]] %>% .[1]\n        \n        \n        # Read all options data\n        optseriesData = html_nodes(hh, xpath = paste0('//table/tr[1]/td[2]/table/tr[2]/td/table/tr/td/table/tr[2]/td[2]/table[3]/tr/td/table[', 2+n*3 ,']') ) %>%\n          html_table(fill=T) %>% data.frame(.) %>% .[-c(1:3), ]  %>% slice(1:(nrow(.)-3))\n        \n        # Clear call data\n        calls = optseriesData[1:16]\n        names(calls) = c('code','volrub','volopts','trades','OI','maxpr','minpr','last','lastdate','roc','bid','ask','cprice','tprice','strike', 'iv')\n        \n        for (i in 1:ncol(calls)){\n          \n          if( names(calls[i]) %in% c('code','roc','lastdate') ) next\n          \n          calls[,i] = calls[,i] %>% \n             gsub(rawToChar(as.raw(194)), '', ., useBytes=T) %>% \n             gsub(rawToChar(as.raw(160)), '', ., useBytes=T) %>% \n             gsub(',', '.', .) %>% \n             gsub('-', '0', ., fixed=T ) %>% \n             as.numeric\n        }\n        \n        calls = calls[, c('code','strike','tprice','ask','bid','iv','OI','volrub','volopts','trades','last','lastdate','roc','cprice','maxpr','minpr')]\n        \n        # Clear puts data\n        puts = optseriesData[15:30]\n        names(puts) = c('strike', 'iv', 'tprice','cprice', 'bid','ask','last','lastdate','roc','maxpr','minpr','trades','OI','volrub','volopts', 'code')\n        \n        for (i in 1:ncol(puts)){\n          \n          if( names(puts[i]) %in% c('code','roc','lastdate') ) next\n          puts[,i] = puts[,i] %>% \n          gsub(rawToChar(as.raw(194)), '', ., useBytes=T) %>% \n          gsub(rawToChar(as.raw(160)), '', ., useBytes=T) %>% \n          gsub(',', '.', .) %>% \n          gsub('-', '0', ., fixed=T ) %>%\n          as.numeric\n        }\n        \n        puts = puts[, c('code','strike','tprice','ask','bid','iv','OI','volrub','volopts','trades','last','lastdate','roc','cprice','maxpr','minpr')]\n        \n        # Single expiration calls and puts to list\n        optboardList[[n+1]] = list(calls=calls, puts=puts)\n        optExps = c(optExps, as.character(optseriesExp))\n    \n    }, silent=T)\n    \n    \n  }\n  \n  # Name boards\n  names(optboardList) = optExps\n  \n  return(optboardList)\n\n}\n\n#   ((boardDownload(\"RTS-12.15\") %>% optionsCurrentInfo())[[2]][['calls']])[, c('strike', 'iv')] %>% as.data.frame %>% qplot(data=., x=strike, y=iv)\n\n\n\n# +----------------------------------------------+\n# | Add greeks\n# +----------------------------------------------+\n\n\n\nmoexGreeks = function(x, expdate){\n  \n  require(fOptions)\n  #expdate = '15.03.2016'\n  #x = boardDownload(\"RTS-3.16\")\n  \n  brdwgreeks = list()\n  \n  curtime = x  %>% datetimeCurrentInfo() %>% as.Date\n  t = as.numeric(as.Date(expdate, '%d.%m.%Y') - curtime)/365\n  \n  S = futureCurrentInfo(x)$last\n  if(S == '') \n    S = (futureCurrentInfo(x)$bid + futureCurrentInfo(x)$ask) / 2\n  \n  #xtype = 'call'\n  for(xtype in c('calls', 'puts')){\n    \n    brd = (x %>% optionsCurrentInfo())[[expdate]][[xtype]]\n    \n    #options('scipen' = 100, digits = 4)\n    greeks =  sapply(c('delta', 'gamma', 'vega', 'theta'), function(x){\n        \n        param = x\n        sapply(c(1:nrow(brd)),\n               function(x){ \n                 \n                 GBSGreeks(param, substr(xtype,1,1), S, brd[x, 'strike'], t, 0, 0, brd[x, 'iv']/100) }\n               )\n        \n      }, USE.NAMES=T\n    ) %>% as.data.frame\n    \n    \n    greeks$theta = greeks$theta/365\n    greeks$vega  = greeks$vega/100  \n    \n    brdwgreeks[[paste0(xtype, 's')]] = cbind(brd, greeks)\n    \n  }\n  \n  return(brdwgreeks)\n\n}\n\n\n\n# fut=\"Si-12.15\"\n# (boardDownload(\"MXI-12.15\") %>% moexGreeks(., '17.12.2015'))$calls %>% View\n\n",
    "created" : 1446660643197.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "241127682",
    "id" : "30138896",
    "lastKnownWriteTime" : 1446705262,
    "path" : "~/MyR/OptionsPortfilioAnalyser/R/moex_scraping.R",
    "project_path" : "R/moex_scraping.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "type" : "r_source"
}