{
    "contents" : "\n\nrequire(QUANTlab)\nrequire(dplyr)\n\n\n# the sticky strike method \n\n# underlying asset range\nk <- seq(55000, 70000, 500) \n\n# Inicial portfolio\nport <- data.frame(\n  type=c(\"p\", \"u\", 'p', 'p'),\n  strike=c(61500, 0, 61500, 60000),\n  vola=c(0.21232, 0, 0.21232, 0.20488),\n  exp=c('15.12.2015', '15.12.2015','15.12.2015','15.12.2015'),\n  quant=c(2, 1, 3, -6),\n  trades=c(1750, 62732, 1500, 950)\n) \n\n\n# +--- Portfolio securities codes ---+\n\nbaseasset = 'Si'\n\nseccodes = sapply(c(1:nrow(port)), function(x){\n  \n  cursec = port[x,]\n  MakeSecCode(baseasset, cursec$type, cursec$exp, cursec$strike)\n})\n\n\n\n# +--- Get current market volatility ---+\n\nmarketinfo = boardDownload('Si-12.15')  \nfutinfo = futureCurrentInfo(marketinfo)\noptsinfo = optionsCurrentInfo(marketinfo)\n\noptsinfo = rbind(\n  optsinfo[[as.character(port$exp[1])]][['puts']], \n  optsinfo[[as.character(port$exp[1])]][['calls']]\n  )\n\nivs = optsinfo %>% filter(code %in% seccodes) %>% select(code, iv) %>% left_join(data.frame(code = seccodes), .)\nivs[which(is.na(ivs$iv)), 'iv'] = 0\n\nport$vola = ivs$iv/100\n\n\n\n\n# +------------------------------------------------+\n# | Generate security code for futures and options\n# +------------------------------------------------+\n\nMakeSecCode = function(ba, type, expdate, strike = NULL){\n    \n    expdate = as.Date(x = expdate, format = '%d.%m.%Y')\n    \n    nmonth = as.numeric(format(expdate, \"%m\"))\n    year = substr(format(expdate, \"%y\"), 2, 2 )  \n    \n    if(type %in% c('f','u') )  {\n      \n      month = substr(c(\"FGHJKMNQUVXZ\"),nmonth,nmonth)\n      return(paste0(ba, month, year))\n      \n    } else {  # c or p\n      \n      if(type=='c') nltrs=c(1:12) else nltrs=c(13:24)\n      return(paste0(ba, strike, 'B', LETTERS[nltrs][nmonth], year) )\n    }\n   \n   return(0)\n}\n\n# MakeSecCode('Si', 'c', '15.12.2015', 31000)\n\n# +--------------------------------------------+\n# | Calc profile for multiple expitation dates\n# +--------------------------------------------+\n\nMultipleExpsProfile <- function (port, k, param='premium', today=Sys.Date()) {\n  \n  expdates = ((as.Date(port$exp, format='%d.%m.%Y') %>% unique) - Sys.Date()) %>% as.numeric\n  return(sapply(expdates, function(x)PortfolioProfile(port, k, param, x) ) %>% rowSums)\n}\n\n\n\n\n# +---------------------------------------+\n# | Calc params for each base asset price\n# +---------------------------------------+\n\nPortfolioProfile = function(port, k, param='premium', t=1/365/24/60 ){\n  \n  require(QUANTlab)\n  \n  pv = NULL\n  for(S in k) { \n    \n    pv <- c(pv,\n            PortfolioValue(\n              param=param,\n              S=S, T=t/365, \n              dS=10, port=port)$value\n    ) \n  }\n  \n  if(param=='premium') pv = pv - sum(port$quant * port$trades)\n  return(pv)\n}\n\n\n\npdelta = MultipleExpsProfile(port, k, 'delta')\n\npv = MultipleExpsProfile(port, k)\npv.exp = PortfolioProfile(port, k)\n\n# current underlying\nS0 <- 63300\n\n\n# plot charts\npar(mfrow=c(2,1))\n\nplot(k, pv, ylim=range(pv, pv.exp), type=\"l\", col=\"red\") \nlines(k, pn.month, type=\"l\", col=\"blue\") \nlines(k, pv.exp, type=\"l\", col=\"black\") \nabline(v=S0,h=0, col=\"grey\") \ngrid()\n\nplot(k, pdelta, ylim=range(pdelta), type=\"l\", col=\"red\") \nabline(v=S0,h=0, col=\"grey\") \ngrid()\n\n\n",
    "created" : 1446660174005.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "769009269",
    "id" : "C6AAEB3C",
    "lastKnownWriteTime" : 1445570148,
    "path" : "~/MyR/OptionsPortfilioAnalyser/R/portfolio_profile.R",
    "project_path" : "R/portfolio_profile.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}